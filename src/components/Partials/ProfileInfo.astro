---
//Refactoring ProfileParts because React Server Components' MessageChannel breaking
// CF workers

import roleIdConverter from "../Helpers/roleIdConverter";
import type { ProfileType } from "../Types/profile_type";

const { profileInfo, editable } = Astro.props;
const { userData, userProfile } = profileInfo;

const shareUrl = `https://www.vandbruno.net/profile/${userData.username}`;
---

<style>
  .fade-in {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>

<div class="min-h-screen flex items-center justify-center p-4 mt-10">
  <div class="rounded-xl shadow-2xl max-w-4xl w-full p-8 transition-all duration-300 fade-in"
       style={`background-color: ${userProfile.color || "#1F2937"}`}>
    <div class="flex flex-col md:flex-row">
      
      <!-- Profile Top -->
      <div class="md:w-1/3 text-center mb-8 md:mb-0">
        <img
          src={userData.avatarUrl}
          alt={`${userData.fullname}'s profile picture`}
          class="rounded-full w-48 h-48 mx-auto mb-4 border-4 border-indigo-800 dark:border-blue-900 transition-transform duration-300 hover:scale-105"
        />
        <h1 class="text-2xl font-bold text-indigo-800 dark:text-white mb-2">
          {userData.fullname}
        </h1>
        <p class="text-gray-600 dark:text-gray-300">
          {roleIdConverter(userData.roleId)}
        </p>

        <div class="mt-5">
          {editable ? (
            <a
              class="bg-indigo-800 text-white px-4 py-3 rounded-lg hover:bg-blue-900 transition-colors duration-300 hover:cursor-pointer"
              href="/profile/edit"
            >
              Edit Profile
            </a>
          ) : (
            <button
              class="px-4 py-3 rounded-lg border bg-gray-100 text-indigo-800 border-indigo-800 hover:bg-white transition-colors duration-300 hover:cursor-pointer"
              id="copyBtn"
            >
              Copy Profile Link
            </button>
          )}
        </div>
      </div>

      <!-- Profile Main -->
      <div class="md:w-2/3 md:pl-8">
        {userProfile.profileTitle && (
          <h2 class="text-xl text-center underline font-semibold text-indigo-800 dark:text-white mb-4">
            {userProfile.profileTitle}
          </h2>
        )}

        <div class="mb-6">
          <h2 class="text-xl font-semibold text-indigo-800 dark:text-white mb-4">Bio</h2>
          <div class="text-gray-700 dark:text-gray-300">
            <p>{userProfile.bio ?? "This user has not written their bio yet."}</p>
          </div>
        </div>

        <div class="mb-6">
          <h2 class="text-xl font-semibold text-indigo-800 dark:text-white mb-4">Links</h2>
          <div class="text-gray-700 dark:text-gray-300">
            {(() => {
              const links = [
                { name: "LinkedIn", url: userProfile.linkedinUrl },
                { name: "Instagram", url: userProfile.instagramUrl },
                {
                  name: userProfile.additionalUrlName ?? "Website",
                  url: userProfile.additionalUrl,
                },
              ].filter((l) => l.url);

              if (links.length === 0) {
                return <p>This user hasnâ€™t added any links.</p>;
              }

              return (
                <div class="flex flex-wrap gap-2">
                  {links.map((link) => (
                    <a
                      href={link.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-sm"
                    >
                      {link.name}
                    </a>
                  ))}
                </div>
              );
            })()}
          </div>
        </div>

        <div class="mb-6">
          <h2 class="text-xl font-semibold text-indigo-800 dark:text-white mb-4">Contact Information</h2>
          <div class="text-gray-700 dark:text-gray-300">
            <ul class="space-y-2">
              <li class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg"
                     class="h-5 w-5 mr-2 text-indigo-800 dark:text-blue-900"
                     viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                </svg>
                {userProfile.mobileNumber ?? "This user has not shared their mobile number"}
              </li>
            </ul>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

{!editable && (
  <script>
    const btn = document.getElementById('copyBtn');
    if (btn) {
      btn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText("{shareUrl}");
          btn.textContent = "Copied!";
          btn.classList.remove("bg-gray-100", "text-indigo-800", "border-indigo-800");
          btn.classList.add("bg-green-100", "text-green-800", "border-green-800");
          setTimeout(() => {
            btn.textContent = "Copy Profile Link";
            btn.classList.remove("bg-green-100", "text-green-800", "border-green-800");
            btn.classList.add("bg-gray-100", "text-indigo-800", "border-indigo-800");
          }, 2000);
        } catch (err) {
          console.error("Failed to copy:", err);
        }
      });
    }
  </script>
)}
